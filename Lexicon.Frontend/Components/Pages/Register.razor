@page "/register"
@inject IUnitOfWork Services
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using Lexicon.Api.Entities
@inject HttpClient Http
@inject UserService UserService
@using Lexicon.Frontend.ServicesImp
@using Microsoft.AspNetCore.Components.Forms




@inject IAuthService AuthService



<PageTitle>Register</PageTitle>
<h3>Register</h3>

<div class="register-form">
    <div class="form-group">
        <label for="firstName">First Name</label>
        <input id="firstName" type="text" class="form-control" @bind="registerModel.FirstName" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <input id="lastName" type="text" class="form-control" @bind="registerModel.LastName" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input id="email" type="email" class="form-control" @bind="registerModel.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input id="password" type="password" class="form-control" @bind="registerModel.Password" />
    </div>
    <div class="form-group">
        <label for="role">Role</label>
        <select id="role" class="form-control" @bind="registerModel.Role">
            @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
            {
                <option value="@role">@role</option>
            }
        </select>
    </div>

    <button type="button" class="btn btn-primary" @onclick="HandleRegister">Register</button>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();

    private async Task HandleRegister()
    {
        try
        {
            // Converted registerModel.Role to right UserRole-typ
            Lexicon.Frontend.Models.UserRole userRole = (Lexicon.Frontend.Models.UserRole)registerModel.Role;

            var user = new Lexicon.Frontend.Models.User
                {
                    FirstName = registerModel.FirstName,
                    LastName = registerModel.LastName,
                    Email = registerModel.Email,
                    Password = registerModel.Password,
                    Role = 0 // Use the converted UserRole
                };

            await UserService.CreateUserAsync(user);

            // Hantera svar från API efter behov
            // if (UserService.CreateUserAsync(user) != null)
            // {
            //     Navigation.NavigateTo("/login");
            // }
            // else
            // {
            //     Console.WriteLine("Failed to create user");
            //     Navigation.NavigateTo("/error");
            // }
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering: {ex.Message}");
            Navigation.NavigateTo("/error");
        }
    }

    public enum UserRole
    {
        Teacher,
        Student
    }

    public class RegisterModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public UserRole Role { get; set; } = UserRole.Student; // Default role selection
    }
}