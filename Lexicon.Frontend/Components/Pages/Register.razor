@page "/register"
@inject IUnitOfWork Services
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using System.Net.Http.Json
@inject HttpClient Http
@using Lexicon.Frontend.ServicesImp
@using Microsoft.AspNetCore.Components.Forms
@using Lexicon.Frontend.Models


<PageTitle>Register</PageTitle>
<h3>Register</h3>

@if (!loading)
{
    <p>Loading....</p>
}
else
{
    <EditForm Model="@User" OnValidSubmit="HandleRegister" FormName="logintest">
        <div class="register-form">
            <div class="mb-3">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="User.FirstName" />
            </div>
            <div class="mb-3">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="User.LastName" />
            </div>
            <div class="mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="User.Email" />
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" @bind-Value="User.Password" />
            </div>
            <div class="mb-3">
                <label for="role">Role</label>
                <InputSelect id="role" class="form-control" @bind-Value="User.Role">
                    @foreach (var role in User.AllRoles)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
}

@code {
    [SupplyParameterFromForm]
    private User User { get; set; }
    private bool loading = false;


    protected async override Task OnInitializedAsync()
    {
        User = new User()
            {
                FirstName = string.Empty,
                LastName = string.Empty,
                Password = string.Empty,
                Email = string.Empty,
                Role = 0,
                Documents = new List<Document>()
            };
            loading = true;
        
    }


    private async Task HandleRegister()
    {
        try
        {
            User =  new User()
                {
                    FirstName = User.FirstName,
                    LastName = User.LastName,
                    Email = User.Email,
                    Password = User.Password,
                    Role = User.Role,
                    Documents = new List<Document>()
                };

            await Services.UserService.CreateUserAsync(User);

            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering: {ex.Message}");
            Navigation.NavigateTo("/error");
        }
    }
}