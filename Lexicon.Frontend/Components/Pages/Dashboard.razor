@page "/dashboard"
@rendermode InteractiveServer
@inject IUnitOfWork services
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Sections

<SectionContent SectionName="page-title">Översikt</SectionContent>

<section class="page-section">
    
    <div class="container py-0">
        <div class="row gap-3 align-items-stretch">
            <div class="card col text-center p-3">
                <div class="hstack gap-3 fs-1 fw-medium mx-auto mb-1">
                    <i class="bi bi-book"></i>
                    @coursesCount
                </div>
                <span class="fw-medium text-secondary">KURSER</span>
            </div>
            <div class="card col text-center p-3">
                <div class="hstack gap-3 fs-1 fw-medium mx-auto mb-1">
                    <i class="bi bi-people"></i>
                    @teachersCount
                </div>
                <span class="fw-medium text-secondary">LÄRARE</span>
            </div>
            <div class="card col text-center p-3">
                <div class="hstack gap-3 fs-1 fw-medium mx-auto mb-1">
                    <i class="bi bi-people"></i>
                    @studentsCount
                </div>
                <span class="fw-medium text-secondary">ELEVER</span>
            </div>
        </div>
    </div>
</section>
<section class="page-section">
    <h2 class="h4">Mina kurser</h2>
    <div class="card p-3">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Namn</th>
                    <th scope="col">Start datum</th>
                    <th scope="col">Slut datum</th>
                </tr>
            </thead>
            <tbody>
                @if (myCourses == null)
                {
                    <p>Laddar kurser...</p>
                }
                else if (myCourses.Count == 0)
                {
                    <p>Du har inga kurser</p>
                }
                else
                {
                    foreach (var course in myCourses)
                    {
                        <tr @onclick="() => NavigateToCourse(course.CourseId)">
                            <td>@course.Name</td>
                            <td>@course.StartDate</td>
                            <td>@course.EndDate</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</section>
<section class="page-section">
    <div class="container py-0">
        <div class="row gap-3 align-items-stretch">
            <!-- TODO: naviger till rätt sida för samtliga knappar nedan -->
            <a class="btn btn-outline-primary col text-center p-3" href="/edit_course">
                <div class="fs-1 fw-medium mx-auto mb-1">
                    <i class="bi bi-plus-lg"></i>
                </div>
                <span class="fw-medium">NY KURS</span>
            </a>
            <a class="btn btn-outline-primary col text-center p-3" href="#">
                <div class="fs-1 fw-medium mx-auto mb-1">
                    <i class="bi bi-plus-lg"></i>
                </div>
                <span class="fw-medium">NY LÄRARE</span>
            </a>
            <a class="btn btn-outline-primary col text-center p-3" href="#">
                <div class="fs-1 fw-medium mx-auto mb-1">
                    <i class="bi bi-plus-lg"></i>
                </div>
                <span class="fw-medium">NY ELEV</span>
            </a>
        </div>
    </div>
</section>

@code {
    private int coursesCount = 0;
    private int teachersCount = 0;
    private int studentsCount = 0;
    private List<Course>? myCourses;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            User? currentUser = await services.UserService.GetCurrentUserAsync();

            if (currentUser == null || currentUser.Role != Models.UserRole.Teacher)
            {
                Navigation.NavigateTo("/");
                return;
            }

            var courses = (await services.CourseService.GetCoursesAsync()).ToList();
            if (courses != null)
            {
                coursesCount = courses.Count;
                myCourses = courses.Where(c => c.UserIds.Contains(currentUser.UserId)).ToList();
            }

            var users = (await services.UserService.GetUsersAsync()).ToList();
            if (users != null)
            {
                teachersCount = users.Where(x => x.Role == Models.UserRole.Teacher).Count();
                studentsCount = users.Where(x => x.Role == Models.UserRole.Student).Count();
            }

            StateHasChanged();
        }
    }

    private void NavigateToCourse(int id)
    {
        Navigation.NavigateTo($"courses/{id}");
    }
}