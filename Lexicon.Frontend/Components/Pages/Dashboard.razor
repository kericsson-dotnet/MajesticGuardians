@page "/dashboard"
@rendermode InteractiveServer
@inject IUnitOfWork services
@inject NavigationManager Navigation

@if (currentUser == null)
{
    <p><em>Loading...</em></p>
}

else if(!currentUser.Role.ToString().Equals("Teacher") && currentUser.UserId > 0)
{
    <p><em>Loading...</em></p>
}

else
{
    <SectionContent SectionName="page-title">Översikt</SectionContent>

    <section class="page-section">

        <div class="container py-0">
            <div class="row gap-3 align-items-stretch">
                <div class="card col text-center p-3">
                    <div class="hstack gap-3 fs-1 fw-medium mx-auto mb-1">
                        <i class="bi bi-book"></i>
                        @coursesCount
                    </div>
                    <span class="fw-medium text-secondary">KURSER</span>
                </div>
                <div class="card col text-center p-3">
                    <div class="hstack gap-3 fs-1 fw-medium mx-auto mb-1">
                        <i class="bi bi-people"></i>
                        @teachersCount
                    </div>
                    <span class="fw-medium text-secondary">LÄRARE</span>
                </div>
                <div class="card col text-center p-3">
                    <div class="hstack gap-3 fs-1 fw-medium mx-auto mb-1">
                        <i class="bi bi-people"></i>
                        @studentsCount
                    </div>
                    <span class="fw-medium text-secondary">ELEVER</span>
                </div>
            </div>
        </div>
    </section>
    <section class="page-section">
        <h2 class="h4">Mina kurser</h2>
        <div class="card p-3">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Namn</th>
                        <th scope="col">Start datum</th>
                        <th scope="col">Slut datum</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (myCourses == null)
                    {
                        <p>Laddar kurser...</p>
                    }
                    else if (myCourses.Count == 0)
                    {
                        <p>Du har inga kurser</p>
                    }
                    else
                    {
                        foreach (var course in myCourses)
                        {
                            <tr>
                                <td>@course.Name</td>
                                <td>@course.StartDate.ToString("yyyy-MM-dd")</td>
                                <td>@course.EndDate.ToString("yyyy-MM-dd")</td>

                                <td>
                                    <div class="d-flex gap-2">
                                        <a class="btn btn-primary me-2" role="button" href="@NavigateToModules(course.CourseId)">
                                            Modules
                                        </a>

                                        <a class="btn btn-secondary me-2" role="button" href="@NavigateToCourse(course.CourseId)">
                                            Details
                                        </a>

                                       <button class="btn btn-danger"
                                            data-bs-toggle="modal"
                                            data-bs-target="@($"#deleteModal-{course.CourseId}")">
                                           <i class="bi bi-x-lg"></i>
                                       </button>

                                       <DeleteCourse Course="@course"  CurrentUser="@currentUser" />
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </section>
    <section class="page-section">
        <div class="container py-0">
            <div class="row gap-3 align-items-stretch">
                <!-- TODO: naviger till rätt sida för samtliga knappar nedan -->
                <a class="btn btn-outline-primary col text-center p-3" href="/edit_course">
                    <div class="fs-1 fw-medium mx-auto mb-1">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                    <span class="fw-medium">NY KURS</span>
                </a>
                <!-- Ny lärare -->
                <a class="btn btn-outline-primary col text-center p-3" href="/register/1/teacher">
                    <div class="fs-1 fw-medium mx-auto mb-1">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                    <span class="fw-medium">NY LÄRARE</span>
                </a>
                <!-- Ny Elev -->
                <a class="btn btn-outline-primary col text-center p-3" href="/register/1/student">
                    <div class="fs-1 fw-medium mx-auto mb-1">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                    <span class="fw-medium">NY ELEV</span>
                </a>
            </div>
        </div>
    </section>

}


@code {
    private int coursesCount = 0;
    private int teachersCount = 0;
    private int studentsCount = 0;
    private List<Course>? myCourses;
    private User? currentUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await services.UserService.GetCurrentUserAsync();

            if (currentUser == null || currentUser.Role != Models.UserRole.Teacher)
            {
                Navigation.NavigateTo("/");
                return;
            }

            var courses = (await services.CourseService.GetCoursesAsync()).ToList();
            if (courses != null)
            {
                coursesCount = courses.Count;
                myCourses = courses.Where(c => c.UserIds.Contains(currentUser.UserId)).ToList();
            }

            var users = (await services.UserService.GetUsersAsync()).ToList();
            if (users != null)
            {
                teachersCount = users.Where(x => x.Role == Models.UserRole.Teacher).Count();
                studentsCount = users.Where(x => x.Role == Models.UserRole.Student).Count();
            }

            StateHasChanged();
        }
    }

    private string NavigateToCourse(int courseId) => $"/course_details/{courseId}";

    private string NavigateToModules(int courseId) => $"/modules/{courseId}";

}