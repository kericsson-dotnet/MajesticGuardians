@page "/activities/{ModuleId:int}"
@inject IUnitOfWork Services
@inject NavigationManager Navigation

@rendermode InteractiveServer

@if (isLoading)
{
    <p><em>Läser in...</em></p>
}

else if (loadingError != null)
{
    <p> Det gick inte att läsa in aktiviter: @loadingError</p>
}

else
{
    if (activities == null || !activities.Any())
    {
        <p>Det finns inga aktiviter i den här modulen</p>
    }

    else
    {
        if(currentUser != null)
        {
            <PageTitle>Aktivitier</PageTitle>

            <h3>Aktivitier för @Module.Name</h3>

            <div class=" d-flex mt-2 gap-2">
                @if (currentUser.Role == UserRole.Teacher)
                {
                    <NavLink class="btn btn-primary" href="@($"/edit_activity/{ModuleId}")">Lägg till ny aktivitet</NavLink>
                }

                <NavLink class="btn btn-secondary" href="@GoToModulePage()">Till module sidan</NavLink>
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th>Aktivitet</th>
                        <th>Namn</th>
                        <th>Beskrivning</th>
                        <th>Start Datum</th>
                        <th>Slut Datum</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var activity in activities)
                    {
                        <tr>
                            <td>@activity.Type</td>
                            <td>@activity.Name</td>
                            <td>@activity.Description</td>
                            <td>@activity.StartDate.ToShortDateString()</td>
                            <td>@activity.EndDate.ToShortDateString()</td>
                            <td>
                                @if (currentUser.Role == UserRole.Teacher)
                                {
                                    <div class="d-flex">
                                        <a class="btn btn-primary me-2" role="button" href="@EditActivityUrl(activity.ActivityId)">
                                            <i class="bi bi-pencil"></i>
                                        </a>

                                        <button class="btn btn-danger"
                                                data-bs-toggle="modal"
                                                data-bs-target="@($"#deleteModal-{activity.ActivityId}")">
                                            <i class="bi bi-x-lg"></i>
                                        </button>

                                        <DeleteActivity Activity="@activity" />
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        else
        {
            NavigateToHome();
        }
    }
}

@code {

    [Parameter]
    public int ModuleId { get; set; }

    private List<Activity>? activities;
    private Module? Module { get; set; }

    private User? currentUser;

    private bool isLoading = true;

    private string? loadingError = null;

    protected async override Task OnInitializedAsync()
    {

        try
        {
            currentUser = await Services.UserService.GetCurrentUserAsync();

            if (currentUser == null || (currentUser.Role != Models.UserRole.Student && currentUser.Role != Models.UserRole.Teacher))
            {
                NavigateToHome();
                return;
            }

            // Make sure that the student can not access other modules
            if (currentUser.Role == Models.UserRole.Student)
            {
                var courses = await Services.CourseService.GetAllUsersCourses(currentUser.UserId);
                var courseId = courses.FirstOrDefault().CourseId;
                var course = await Services.CourseService.GetCourseAsync(courseId);

                if (!course.ModuleIds.Contains(ModuleId))
                {
                    loadingError = $"Error: Not Found - 404";
                    return;
                }
            }

            Module = await Services.ModuleService.GetModuleAsync(ModuleId);

            if (Module?.ActivityIds != null && Module.ActivityIds.Any())
            {
                var tasks = Module.ActivityIds.Select(id => Services.ActivityService.GetActivityAsync(id));
                var activityResults = await Task.WhenAll(tasks);
                activities = activityResults.ToList();
            }
        }

        catch(Exception ex)
        {
            loadingError = $"Error: {ex.Message}";
        }

        finally
        {
            isLoading = false;
        }

    }

    private string EditActivityUrl(int activityId) => $"/edit_activity/{ModuleId}/{activityId}";
    private string GoToModulePage() => $"/modules/{Module.CourseId}";
    private void NavigateToHome() => Navigation.NavigateTo("/", true);

}