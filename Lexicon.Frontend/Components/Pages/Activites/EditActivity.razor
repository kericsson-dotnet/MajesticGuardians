@page "/edit_activity/{ModuleId:int}"
@page "/edit_activity/{ModuleId:int}/{ActivityId:int}"
@inject IUnitOfWork Services
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
	<p><em>Läser in...</em></p>
}


else if (loadingError != null)
{
	<p> Det gick inte att läsa in aktiviten: @loadingError</p>
}

else if (Module == null || ModuleId == null)
{
	<p>Modulen existeras inte, så den har inga aktiviter</p>
}

else if (currentUser != null)
{
	if (currentUser.Role == UserRole.Teacher && currentUser.UserId > 0)
	{
		<PageTitle>@titleText</PageTitle>

		<h3>@titleText</h3>

		<div>
			<EditForm Model="@Activity" OnValidSubmit="@HandleSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="form-group mb-3">
					<label for="name">Namn</label>
					<InputText id="name" class="form-control" @bind-Value="@Activity.Name" />
				</div>

				<div class="form-group mb-3">
					<label for="description">Beskrivning</label>
					<InputText id="description" class="form-control" @bind-Value="@Activity.Description" />
				</div>

				<div class="mb-3">
					<label for="type">Aktivitet</label>
					<InputSelect id="type" class="form-control" @bind-Value="Activity.Type">
						@foreach (var activity in Activity.AllActivities)
						{
							<option value="@activity">@activity</option>
						}
					</InputSelect>
				</div>

				<div class="form-group mb-3">
					<label for="startDate">Start datum</label>
					<InputDate id="startDate" class="form-control" @bind-Value="@Activity.StartDate" />
				</div>

				<div class="form-group mb-3">
					<label for="endtDate">Slut datum</label>
					<InputDate id="endDate" class="form-control" @bind-Value="@Activity.EndDate" />
				</div>

				<div class="d-flex mt-2 gap-2">
					<button type="submit" class="btn btn-primary">Spara</button>
					<button @onclick="GoToActivityPage" class="btn btn-secondary">Till aktivitet sidan</button>
				</div>
			</EditForm>
		</div>
	}

	else
	{
		GoToMainPage();
	}
}



@code {
	[Parameter]
	public int? ActivityId { get; set; }

	[Parameter]
	public int? ModuleId { get; set; }

	[SupplyParameterFromForm]
	private Activity? Activity { get; set; }

	private Module? Module { get; set; }
	private User? currentUser;

	private bool isLoading = true;

	private string? titleText = null;
	private string? loadingError = null;

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			currentUser = await Services.UserService.GetCurrentUserAsync();

			if (currentUser == null || currentUser.Role != Models.UserRole.Teacher)
			{
				GoToMainPage();
			}

			StateHasChanged();
		}
	}

	protected async override Task OnInitializedAsync()
	{
		await LoadActivityAsync();
	}

	private async Task HandleSubmit()
	{
		ArgumentNullException.ThrowIfNull(Activity);

		try
		{
			if (ActivityId == null)
			{
				await Services.ActivityService.AddActivityAsync(Activity);
			}

			else
			{
				Activity.ActivityId = ActivityId.Value;
				await Services.ActivityService.UpdateActivityAsync(ActivityId.Value, Activity);
			}

			Navigation.NavigateTo($"/activities/{ModuleId.Value}");

		}

		catch (Exception ex)
		{
			loadingError = ex.Message;
		}
	}


	private async Task LoadActivityAsync()
	{

		if (Activity != null)
		{
			return;
		}

		Module = await Services.ModuleService.GetModuleAsync(ModuleId.Value);

		if (Module == null)
		{
			loadingError = "Modulen existerar inte.";
			isLoading = false;
			return;
		}


		if (ActivityId != null)
		{
			try
			{
				Activity = await Services.ActivityService.GetActivityAsync(ActivityId.Value);

				if(Activity == null)
				{
					loadingError = "Not Found";

				}

				else
				{
					titleText = "Uppdatera aktiviten";
				}

			}

			catch (Exception ex)
			{
				loadingError = ex.Message;
			}
		}

		else
		{
			Activity = new Activity()
			{
				Name = string.Empty,
				Type = 0,
				EndDate = DateTime.UtcNow,
				StartDate = DateTime.UtcNow,
				Description = string.Empty,
				ModuleId = ModuleId.Value
			};

			titleText = "Lägg till ny aktivitet";
		}

		isLoading = false;
	}

	private void GoToActivityPage() => Navigation.NavigateTo($"/activities/{ModuleId}");

	private void GoToMainPage() => Navigation.NavigateTo("/");
}
