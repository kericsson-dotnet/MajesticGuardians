@page "/edit_user/{userId:int}"
@inject IUnitOfWork Services
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit User</PageTitle>

<h3>Edit User</h3>

@if (isLoading)
{
    <p>Loading...</p>
}

else if(userModel.UserId <= 0)
{
    <p>No user found</p>
}

else
{
    <div class="edit-user-form">
        <EditForm Model="@userModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="userModel.FirstName" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="userModel.LastName" />
            </div>
            
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="userModel.Email" />
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
            </div>

            <!-- Uncommented. No need to let user change role or course from here -->
            @* <div class="form-group">
                    <label for="role">Role</label>
                    <InputSelect id="role" class="form-control" @bind-Value="userModel.Role">
                        @foreach (var role in userModel.AllRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
               </div>

                <div class="form-group">
                     <label for="course">Course</label>
                     <InputSelect id="course" class="form-control" @bind-Value="selectedCourseId">
                         @foreach (var course in courses)
                         {
                             <option value="@course.CourseId">@course.Name</option>
                         }
                      </InputSelect>
                </div> 
             *@

            <div class="d-flex gap-3">
                <button type="submit" class="btn btn-primary">Spara</button>
                <button @onclick="NavigateToManageUsers" class="btn btn-secondary">Tillbaka</button>
            </div>
        
        </EditForm>

    </div>
}

@code {
    [Parameter]
    public int userId { get; set; }

    private User userModel = new User();
    private User? currentUser;
    private bool isLoading = true;


    // private string? loadingError = null;
    // private List<Course> courses = new List<Course>();
    // private int selectedCourseId;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //loadingError = null;
            currentUser = await Services.UserService.GetCurrentUserAsync();

            if (currentUser == null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            if (currentUser.Role == Models.UserRole.Student && currentUser.UserId != userId)
            {
                Navigation.NavigateTo($"/edit_user/{currentUser.UserId}");
                return;
            }

            userModel = await Services.UserService.GetUserAsync(userId);
            

            // courses = await Services.CourseService.GetCoursesAsync();

            // var userCourse = userModel.Courses.FirstOrDefault();

            // if (userCourse != null)
            // {
            //     selectedCourseId = userCourse.CourseId;
            // }
        }

        catch (Exception ex)
        {
            //loadingError = ex.Message;
            Console.WriteLine(ex.Message);
        }

        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task HandleSubmit()
    {
        try
        {
            await Services.UserService.UpdateUserAsync(userModel);
            //await UpdateUserCourses();
            Navigation.NavigateTo("/manage_users");
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error saving user or course changes: {ex.Message}");
        }
    }

    // private async Task UpdateUserCourses()
    // {
    //     try
    //     {
    //         var selectedCourse = courses.FirstOrDefault(c => c.CourseId == selectedCourseId);
    //         if (selectedCourse != null)
    //         {
    //             var courseIds = userModel.Courses.Select(c => c.CourseId).ToList();
    //             courseIds.Add(selectedCourse.CourseId);

    //             var response = await Http.PutAsJsonAsync($"api/users/{userModel.UserId}/courses", courseIds);
    //             response.EnsureSuccessStatusCode(); // Throw an exception if the response is not successful
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error updating user courses: {ex.Message}");
    //     }
    // }

    private void NavigateToHome() => Navigation.NavigateTo("/");
    private void NavigateToManageUsers() => Navigation.NavigateTo("/manage_users");

}
