@page "/login"

@layout EmptyLayout

@using Lexicon.Api.Models
@using Lexicon.Frontend.ServicesImp

@inject IUnitOfWork Services
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

@if (loading)
{
    <p>Laddar...</p>
} else
{
    <div class="container h-100 align-content-center">
        <div class="row card mx-auto p-0" id="login-card">
            <div class="logo-container">
                <img class="logo" src="logo.png" width="232" height="80" alt="Lexicon" />
            </div>
            <div class="card-body p-4 pb-5">
                <h1 class="h3 mb-4">Logga in</h1>
                <EditForm Model="@loginModel" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label class="form-label" for="email">Email address</label>
                        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label" for="password">Lösenord</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                    </div>

                    <div class="d-flex gap-3">
                        <button type="submit" class="btn btn-primary">Logga in</button>
                        <button @onclick="RegisterPage" class="btn btn-secondary">Register</button>
                    </div>
                   
                </EditForm>
                @if (error != null)
                {
                    <p class="text-danger mt-3">@error</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool loading = true;
    private string? error;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await Services.SessionStorageService.GetItemAsync("authToken");
            bool isAuthenticated = !string.IsNullOrEmpty(token);
            if (isAuthenticated)
            {
                Navigation.NavigateTo("/");
            }
            loading = false;
            StateHasChanged();
        }
    }

    private void RegisterPage() => Navigation.NavigateTo("/register");

    private async Task HandleSubmit()
    {
        try
        {
            var response = await Services.AuthService.LoginAsync(new UserLoginModel
                {
                    Email = loginModel.Email,
                    Password = loginModel.Password
                });

            if (!string.IsNullOrEmpty(response))
            {
                // Loggin success
                await Services.SessionStorageService.SetItemAsync("authToken", response);
                Navigation.NavigateTo("/");
            }
            else
            {
                error = "Inloggning misslyckades. Försök igen";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error logging in: {ex.Message}");
            error = "Inloggning misslyckades. Försök igen";
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
