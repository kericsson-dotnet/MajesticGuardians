@page "/edit_module/{CourseId:int}"
@page "/edit_module/{CourseId:int}/{ModuleId:int}"
@inject IUnitOfWork Services
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>@titleText</PageTitle>

<h3>@titleText</h3>

@if (isLoading)
{
	<p>Läser in...</p>
}

else if (loadingError != null)
{
	<p> Det gick inte att läsa in modulen: @loadingError</p>
}

else if(Course == null || CourseId == null)
{
	<p>Kursen existeras inte, så den har inga moduler</p>
}

else if(currentUser != null)
{
	if (currentUser.Role.ToString().Equals("Teacher") && currentUser.UserId > 0)
	{
		<div>
			<EditForm Model="@Module" OnValidSubmit="HandleSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="form-group mb-3">
					<label for="name">Namn</label>
					<InputText id="name" class="form-control" @bind-Value="Module.Name" />
				</div>
				<div class="form-group mb-3">
					<label for="beskrivining">Beskrivining</label>
					<InputText id="beskrivining" class="form-control" @bind-Value="Module.Description" />
				</div>
				<div class="form-group mb-3">
					<label for="startDate">Start datum</label>
					<InputDate id="startDate" class="form-control" @bind-Value="Module.StartDate" />
				</div>
				<div class="form-group mb-3">
					<label for="endtDate">Slut datum</label>
					<InputDate id="endtDate" class="form-control" @bind-Value="Module.EndDate" />
				</div>
				<button type="submit" class="btn btn-primary">@(ModuleId != null ? "Uppdatera" : "Spara")</button>
			</EditForm>
		</div>
	}

	else
	{
		GoToMainPage();
	}
}

@code {
	[Parameter]
	public int? ModuleId { get; set; }

	[Parameter]
	public int? CourseId { get; set; }

	[SupplyParameterFromForm]
	private Module? Module { get; set; }

	private Course? Course { get; set; }

	private User? currentUser;

	private bool isLoading = true;
	private bool moduleNotFound = false;

	private string? loadingError = null;
	private string? titleText = null;

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			currentUser = await Services.UserService.GetCurrentUserAsync();

			if (currentUser == null || currentUser.Role != Models.UserRole.Teacher)
			{
				GoToMainPage();
			}

			StateHasChanged();
		}
		
	}


	protected async override Task OnInitializedAsync()
	{
		await LoadModuleAsync();
	}

	private async Task HandleSubmit()
	{
		ArgumentNullException.ThrowIfNull(Module);

		try
		{
			if (ModuleId == null)
			{
				await Services.ModuleService.AddModuleAsync(Module);
			}

			else
			{
				Module.ModuleId = ModuleId.Value;
				await Services.ModuleService.UpdateModuleAsync(Module.ModuleId,Module);
			}

			Navigation.NavigateTo($"/modules/{CourseId.Value}");

		}

		catch (Exception ex)
		{
			loadingError = ex.Message;
		}		
	}

	private async Task LoadModuleAsync()
	{

		if (Module != null)
		{
			return;
		}

		Course = await Services.CourseService.GetCourseAsync(CourseId.Value);

		if (Course == null)
		{
			loadingError = "Kursen existerar inte.";
			isLoading = false;
			return;
		}

		if (ModuleId != null)
		{
			try
			{
				Module = await Services.ModuleService.GetModuleAsync(ModuleId.Value);

				if (Module == null)
				{
					moduleNotFound = true;
				}

				else
				{
					titleText = "Uppdatera modulen";
				}
			}

			catch (Exception ex)
			{
				moduleNotFound = true;
				loadingError = ex.Message;
			}
		}

		else
		{
			Module = new Module()
			{
				Name = string.Empty,
				EndDate = DateTime.UtcNow,
				StartDate = DateTime.UtcNow,
				Description = string.Empty,
				CourseId = CourseId.Value

			};

			titleText = "Lägg till ny module";
		}

		isLoading = false;
	}


	private void GoToMainPage() => Navigation.NavigateTo("/");
}
