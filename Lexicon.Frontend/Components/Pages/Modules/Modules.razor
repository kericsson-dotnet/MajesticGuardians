@page "/modules/{CourseId:int}"
@inject IUnitOfWork Services
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
    <p><em>Läser in...</em></p>
}

else if (loadingError != null)
{
    <p> Det gick inte att läsa in modulen: @loadingError</p>
}

else if (currentUser != null)
{
    @if (currentUser.Role.ToString().Equals("Teacher") || currentUser.Role.ToString().Equals("Student"))
    {
        <div class="container mt-4">
            <h3>@titleText</h3>

            @if (currentUser.Role.ToString().Equals("Teacher") && currentUser.UserId > 0)
            {
                <div class="mt-3">
                    <NavLink class="btn btn-primary" href="@($"/edit_module/{CourseId}")">Lägg ny modul</NavLink>
                </div>
            }

            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover mt-3">
                    <thead>
                        <tr>
                            <th scope="col">Namn</th>
                            <th scope="col">Beskrivning</th>
                            <th scope="col">Start Datum</th>
                            <th scope="col">Slut Datum</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (modules == null || !modules.Any())
                        {
                            <tr>
                                <td colspan="5">Det finns inga tillgängliga moduler</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var module in modules)
                            {
                                <tr>
                                    <td>@module.Name</td>
                                    <td>@module.Description</td>
                                    <td>@module.StartDate.ToString("yyyy-MM-dd")</td>
                                    <td>@module.EndDate.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <div class="btn-group" role="group" aria-label="Module Actions">
                                            <a class="btn btn-secondary me-2" href="@ActivityUrl(module.ModuleId)">
                                                <i class="bi bi-card-list"></i>
                                            </a>
                                            @if (currentUser.Role == Models.UserRole.Teacher)
                                            {
                                                <a class="btn btn-primary me-2" href="@EditModuleUrl(module.ModuleId)">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                                <button class="btn btn-danger"
                                                        data-bs-toggle="modal"
                                                        data-bs-target="@($"#deleteModal-{module.ModuleId}")">
                                                    <i class="bi bi-x-lg"></i>
                                                </button>
                                                <DeleteModule Module="@module" />
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    else
    {
        NavigateToHome();
    }
}

@code {

    [Parameter]
    public int CourseId { get; set; }

    private List<Module>? modules;
    public Course? Course { get; set; }
    private User? currentUser;

    private bool isLoading = true;

    private string? loadingError = null;
    private string? titleText = null;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                currentUser = await Services.UserService.GetCurrentUserAsync();

                if (currentUser == null || (currentUser.Role != Models.UserRole.Student && currentUser.Role != Models.UserRole.Teacher))
                {
                    NavigateToHome();
                    return;
                }

                if (currentUser.Role == Models.UserRole.Student)
                {
                    var courses = await Services.CourseService.GetAllUsersCourses(currentUser.UserId);
                    CourseId = courses.FirstOrDefault().CourseId;
                }

                Course = await Services.CourseService.GetCourseAsync(CourseId);

                if (Course == null)
                {
                    loadingError = "Kursen existerar inte.";
                    isLoading = false;
                    return;
                }

                titleText = $"Moduler för {Course.Name} kursen";

                if (Course?.ModuleIds != null && Course.ModuleIds.Any())
                {
                    var tasks = Course.ModuleIds.Select(id => Services.ModuleService.GetModuleAsync(id));
                    var moduleResults = await Task.WhenAll(tasks);
                    modules = moduleResults.ToList();

                }
            }

            catch (Exception ex)
            {
                loadingError = $"Error: {ex.Message}";
            }

            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }

    }

    private string ActivityUrl(int moduleId) => $"/activities/{moduleId}";

    private string EditModuleUrl(int id) => $"/edit_module/{CourseId}/{id}";
    private void NavigateToHome() => Navigation.NavigateTo("/", true);

}
