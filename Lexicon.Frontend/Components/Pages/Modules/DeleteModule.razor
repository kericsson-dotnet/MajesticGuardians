@inject NavigationManager Navigation
@inject IUnitOfWork Services

@if (Module != null)
{
    <div class="modal fade" id="@GetModalId(Module)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-footer">
                    <h5 class="modal-title flex-grow-1 text-start">Är du säker?</h5>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Avbryt</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@DeleteConfirm">
                        Radera
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public Module Module { get; set; }

    private string title = string.Empty;

    protected override void OnParametersSet()
    {
        title = $"Ta bort modulen: {Module?.Name}?";
    }

    public static string GetModalId(Module module)
    {
        return $"deleteModal-{module.ModuleId}";
    }

    private async Task DeleteConfirm()
    {
        await Services.ModuleService.DeleteModuleAsync(Module.ModuleId);
        Navigation.NavigateTo($"/modules/{Module.CourseId}", true);
    }
}
