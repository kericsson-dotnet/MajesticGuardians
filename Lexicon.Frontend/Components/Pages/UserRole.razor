@page "/user-role"
@using Lexicon.Frontend.ServicesImp
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IUnitOfWork Services
@inject CustomAuthenticationStateProvider CustomAuthStateProvider
@rendermode InteractiveServer

<h3>User Role</h3>

@if (isAuthenticated && user.HasClaim(c => c.Type == "role" && c.Value == "Teacher"))
{
    <p>You are authorized as a Teacher.</p>
    <p>User Id: @userData.UserId</p>
    <p>Email: @userData.Email</p>
    <p>FirstName: @userData.FirstName</p>
    <p>LastName: @userData.LastName</p>
}

else
{
    <p>You are not authorized to access this page.</p>
}

@code {
    private bool isAuthenticated;
    private ClaimsPrincipal user;
    private User userData = new User();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Importan to use this
            CustomAuthStateProvider.SetInitialized();

            var authState = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            user = authState.User;
            isAuthenticated = user.Identity.IsAuthenticated;

            var userIdClaim = user.FindFirst("userId")?.Value;

            if (int.TryParse(userIdClaim, out int userId))
            {
                userData = await Services.UserService.GetUserAsync(userId);
            }

            StateHasChanged(); // Ensure state update
        }
    }
}
