@page "/edit_user/{userId:int}"
@inject IUnitOfWork Services
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>Edit User</PageTitle>

<h3>Edit User</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (loadingError != null)
{
    <p>Error loading user: @loadingError</p>
}
else
{
    <div class="edit-user-form">
        <EditForm Model="@userModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="userModel.FirstName" />
            </div>
            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="userModel.LastName" />
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="userModel.Email" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
            </div>

            <div class="form-group">
                <label for="role">Role</label>
                <InputSelect id="role" class="form-control" @bind-Value="userModel.Role">
                    @foreach (var role in userModel.AllRoles)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="course">Course</label>
                <InputSelect id="course" class="form-control" @bind-Value="selectedCourseId">
                    @foreach (var course in courses)
                    {
                        <option value="@course.CourseId">@course.Name</option>
                    }
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
        <p>
            <a @onclick="NavigateToHome">Go to Home</a>
        </p>
    </div>
}

@code {
    [Parameter]
    public int userId { get; set; }

    private User userModel = new User();
    private bool isLoading = true;
    private string? loadingError = null;
    private List<Course> courses = new List<Course>();
    private int selectedCourseId;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true;
            loadingError = null;
            // Load the user data from the API or services using the userId parameter
            userModel = await Services.UserService.GetUserAsync(userId);

            // Get all courses from the database
            courses = await Services.CourseService.GetCoursesAsync();

            // If the user is already enrolled in a course, set the selectedCourseId
            var userCourse = userModel.Courses.FirstOrDefault();
            if (userCourse != null)
            {
                selectedCourseId = userCourse.CourseId;
            }
        }
        catch (Exception ex)
        {
            loadingError = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        // We need to be able to add user to a course, that part dont exist yet.


        try
        {
            // Update user
            await Services.UserService.UpdateUserAsync(userModel);

            // Update users course
            await UpdateUserCourses();

            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving user or course changes: {ex.Message}");
        }
    }

    private async Task UpdateUserCourses()
    {
        try
        {
            var selectedCourse = courses.FirstOrDefault(c => c.CourseId == selectedCourseId);
            if (selectedCourse != null)
            {
                var courseIds = userModel.Courses.Select(c => c.CourseId).ToList();
                courseIds.Add(selectedCourse.CourseId);

                var response = await Http.PutAsJsonAsync($"api/users/{userModel.UserId}/courses", courseIds);
                response.EnsureSuccessStatusCode(); // Throw an exception if the response is not successful
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user courses: {ex.Message}");
        }
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
}
