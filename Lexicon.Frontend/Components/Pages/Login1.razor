@page "/login1"
@using Lexicon.Api.Models
@using Lexicon.Frontend.ServicesImp

@inject IUnitOfWork Services
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IUnitOfWork Services
@inject LocalStorageService LocalStorageService;

@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (isAuthenticated)
{
    <p>You are already logged in.</p>
    <button class="btn btn-primary" @onclick="Logout">Logout</button>
}

else
{
    <div class="login-form">
        <EditForm Model="@loginModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
        <p>
            <a @onclick="NavigateToRegister">Register</a>
        </p>
    </div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isAuthenticated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = !string.IsNullOrEmpty(await LocalStorageService.GetItemAsync("authToken"));
            StateHasChanged(); // Ensure UI reflects changes
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var response = await Services.AuthService.LoginAsync(new UserLoginModel
                {
                    Email = loginModel.Email,
                    Password = loginModel.Password
                });

            if (!string.IsNullOrEmpty(response))
            {
                Navigation.NavigateTo("/");
            }

            else
            {
                Console.WriteLine("Login failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error logging in: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await Services.AuthService.LogoutAsync();
        await LocalStorageService.RemoveItemAsync("authToken");
        isAuthenticated = false;
        Navigation.NavigateTo("/login1");
    }


    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
