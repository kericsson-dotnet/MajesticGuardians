@page "/addUserToCourse/{CourseId:int}"
@inject IUnitOfWork Services
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
    <p><em>Läser in...</em></p>
}

else if (currentUser != null)
{
    @if (currentUser.Role.ToString().Equals("Teacher") && currentUser.UserId > 0)
    {
        <div class="container mt-4">
            <h3>Lägg till användare till @Course.Name</h3>

            <div class="d-flex justify-content-between align-items-center mb-3">
                <NavLink class="btn btn-secondary" href="@CourseDetailsUrl()">Tillbaka till kursöversikt</NavLink>
            </div>

            <div class="row">
                <div class="col">
                    @if (Users == null || !Users.Any())
                    {
                        <p>Det finns inga tillgängliga användare</p>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">Roll</th>
                                    <th scope="col">Förnamn</th>
                                    <th scope="col">Efternamn</th>
                                    <th scope="col">Epost</th>
                                    <th scope="col"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Users)
                                {
                                    <tr>
                                        <td>@user.Role</td>
                                        <td>@user.FirstName</td>
                                        <td>@user.LastName</td>
                                        <td>@user.Email</td>
                                        <td>
                                            <button @onclick="() => HandleSubmit(user.UserId)" class="btn btn-primary btn-sm">Lägg till</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>

    }
    else
    {
        NavigateToHome();
    }
}

@code {
    [Parameter]
    public int? CourseId { get; set; }

    public Course? Course;

    private User? currentUser;
    private bool isLoading = true;
    public List<User> Users { get; set; } = new List<User>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
      if(firstRender)
      {
            try
            {
                currentUser = await Services.UserService.GetCurrentUserAsync();

                if (currentUser == null)
                {
                    NavigateToHome();
                    return;
                }

                Course = await Services.CourseService.GetCourseAsync(CourseId.Value);
                var users = await Services.CourseService.GetAllAvailableUserForCourse(CourseId.Value);

                if (users.Any())
                {
                    var userTasks = users.Select(user => Services.UserService.GetUserAsync(user.UserId));
                    var allUsersWithDetails = await Task.WhenAll(userTasks);

                    Users = allUsersWithDetails.Where(user => user != null).ToList();
                }
            }
            
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }

            finally
            {
                isLoading = false;
                StateHasChanged();
            }
      }
    }

    private string CourseDetailsUrl() => $"/course_details/{CourseId}";

    private async Task HandleSubmit(int userId)
    {
        await Services.CourseService.AddUserToCourse(CourseId.Value, userId);
        Navigation.NavigateTo($"/addUserToCourse/{CourseId}", true);

    }

    private void NavigateToHome() => Navigation.NavigateTo("/", true);
}
