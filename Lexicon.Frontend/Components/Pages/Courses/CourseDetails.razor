@page "/course_details/{CourseId:int}"
@inject NavigationManager Navigation
@inject IUnitOfWork Services
@rendermode InteractiveServer

<PageTitle>Course Details</PageTitle>

@if (isLoading)
{
    <p><em>Läser in...</em></p>
}
else if (Course == null)
{
    <p><em>Kursen är inte tillgänglig</em></p>
}
else if (currentUser != null)
{
    <h3 class="mt-4 mb-3">Kurs detaljer</h3>

    @if (currentUser.Role == Models.UserRole.Teacher && currentUser.UserId > 0)
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <NavLink class="btn btn-primary" href="@AddUserToCourseUrl()">Lägg till användare</NavLink>
            <NavLink class="btn btn-secondary" href="@CourseDashboardUrl()">Till kurslistan</NavLink>
        </div>
    }

    <div class="row">
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">@Course.Name</h5>
                    <p class="card-text">@Course.Description</p>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><strong>Start Datum:</strong> @Course.StartDate.ToShortDateString()</li>
                    <li class="list-group-item"><strong>Slut Datum:</strong> @Course.EndDate.ToShortDateString()</li>
                </ul>
            </div>
        </div>

        @if (currentUser.Role == Models.UserRole.Student)
        {
            <div class="col-md-6">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Studenter i kursen</h5>
                        @if (Students == null || !Students.Any())
                        {
                            <p class="card-text">Det finns inga studenter i kursen</p>
                        }
                        else
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var student in Students)
                                {
                                    <li class="list-group-item">
                                        <strong>@student.FirstName @student.LastName</strong> - @student.Email
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        }

        @if (currentUser.Role == Models.UserRole.Teacher)
        {
            <div class="col-md-8">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Användare i kursen</h5>
                        @if (Users == null || !Users.Any())
                        {
                            <p class="card-text">Det finns inga användare i kursen</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">Id</th>
                                            <th scope="col">Förnamn</th>
                                            <th scope="col">Efternamn</th>
                                            <th scope="col">Epost</th>
                                            <th scope="col">Roll</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in Users)
                                        {
                                            <tr>
                                                <td>@user.UserId</td>
                                                <td>@user.FirstName</td>
                                                <td>@user.LastName</td>
                                                <td>@user.Email</td>
                                                <td>@user.Role</td>
                                                <td>
                                                    <div class="d-flex">
                                                        <button class="btn btn-danger btn-sm me-2"
                                                                data-bs-toggle="modal"
                                                                data-bs-target="@($"#deleteModal-{user.UserId}")">
                                                            <i class="bi bi-x-lg"></i>
                                                        </button>
                                                        <DeleteUserFromCourse User="@user" CourseId="@CourseId" />
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    NavigateToHome();
}

@code {
    [Parameter]
    public int CourseId { get; set; }

    private User? currentUser;
    private bool isLoading = true;

    public Course? Course { get; set; }
    public List<User> Users { get; set; } = new List<User>();
    public List<User> Students { get; set; } = new List<User>();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                currentUser = await Services.UserService.GetCurrentUserAsync();

                if (currentUser == null)
                {
                    NavigateToHome();
                    return;
                }

                if (currentUser.Role == Models.UserRole.Student)
                {
                    var courses = await Services.CourseService.GetAllUsersCourses(currentUser.UserId);
                    CourseId = courses.FirstOrDefault()?.CourseId ?? CourseId;
                }

                Course = await Services.CourseService.GetCourseAsync(CourseId);

                if (Course == null)
                {
                    Navigation.NavigateTo("/course_dashboard", true);
                    return;
                }

                var users = await Services.CourseService.GetAllUsersInCourse(CourseId);

                if (users.Any())
                {
                    var userTasks = users.Select(user => Services.UserService.GetUserAsync(user.UserId));
                    var allUsersWithDetails = await Task.WhenAll(userTasks);

                    Users = allUsersWithDetails.Where(user => user != null).ToList();
                    Students = Users.Where(u => u.Role == Models.UserRole.Student).ToList();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private void NavigateToHome() => Navigation.NavigateTo("/", true);
    private string AddUserToCourseUrl() => $"/addUserToCourse/{CourseId}";
    private string CourseDashboardUrl() => "/course_dashboard";
}
