@page "/course_details/{CourseId:int}"
@inject NavigationManager Navigation
@inject IUnitOfWork Services
@rendermode InteractiveServer

@if (isLoading)
{
    <p><em>Läser in...</em></p>
}

else if(Course == null && isLoading)
{
    <p><em>Läser in...</em></p>
}

else if (Course == null)
{
    <p><em>Kursen är inte tillgängligt</em></p>
}

else if (currentUser != null)
{
    <h3>Kurs detaljer</h3>

    if (currentUser.Role.ToString().Equals("Teacher") && currentUser.UserId > 0)
    {
        <div class="d-flex gap-3">
            <NavLink class="btn btn-primary" href="@AddUserToCourseUrl()">Lägg användare till kursen</NavLink>
            <NavLink class="btn btn-secondary" href="@CourseDashboardUrl()">Återvända tillbaka</NavLink>
        </div>
    }

    if (currentUser.Role.ToString().Equals("Teacher") || currentUser.Role.ToString().Equals("Student"))
    {
        <div class="row">
            <div class="col-md-4">
                <div class="mb-3">
                    <label for="name" class="form-label"><strong>Namn:</strong> @Course.Name</label>
                </div>

                <div class="mb-3">
                    <label for="status" class="form-label"><strong>Beskrivning: </strong> @Course.Description </label>
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label"><strong>Start Datum: </strong> @Course.StartDate.ToShortDateString() </label>
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label"><strong>Slut Datum: </strong> @Course.EndDate.ToShortDateString() </label>
                </div>
            </div>
        </div>
        <div class="row">
            <h3 class="mt-3">Användare i kursen</h3>

            @if (Users == null || !Users.Any())
            {
                <p>Det finns inga användare i kursen</p>
            }

            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Epost</th>
                            <th scope="col">Roll</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Users)
                        {
                            <tr>
                                <td>@user.UserId</td>
                                <td>@user.Email</td>
                                <td>@user.Role</td>
                                
                                @if(currentUser.Role == Models.UserRole.Teacher)
                                {
                                    <td>
                                        <button class="btn btn-danger"
                                                data-bs-toggle="modal"
                                                data-bs-target="@($"#deleteModal-{user.UserId}")">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                        <DeleteUserFromCourse User="@user" CourseId="@CourseId" />
                                    </td>
                                }

                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    }

    else
    {
        NavigateToHome();
    }
}


@code {
    [Parameter]
    public int CourseId { get; set; }

    private User? currentUser;
    private bool isLoading = true;

    public Course? Course { get; set; }
    public List<User> Users { get; set; } = new List<User>();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            currentUser = await Services.UserService.GetCurrentUserAsync();

            if (currentUser == null)
            {
                NavigateToHome();
                return;
            }

            if(currentUser.Role == Models.UserRole.Student)
            {
                var courses = await Services.CourseService.GetAllUsersCourses(currentUser.UserId);
                CourseId = courses.FirstOrDefault().CourseId;
            }

            Course = await Services.CourseService.GetCourseAsync(CourseId);

            if (Course == null)
            {
                Navigation.NavigateTo("/course_dashboard", true);
                return;
            }

            var users = await Services.CourseService.GetAllUsersInCourse(CourseId);

            if (users.Any())
            {
                var userTasks = users.Select(user => Services.UserService.GetUserAsync(user.UserId));
                var allUsersWithDetails = await Task.WhenAll(userTasks);

                Users = allUsersWithDetails.Where(user => user != null).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToHome() => Navigation.NavigateTo("/", true);
    private string AddUserToCourseUrl() => $"/addUserToCourse/{CourseId}";
    private string CourseDashboardUrl() => "/course_dashboard";

}
