@page "/new_or_register_activity"
@inject IUnitOfWork Services
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>New or Register Activity</PageTitle>

<h3>New or Register Activity</h3>

<div class="new-activity-form">
    <EditForm Model="@activityModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="activityName">Activity Name</label>
            <InputText id="activityName" class="form-control" @bind-Value="activityModel.Name" />
        </div>
        <div class="form-group">
            <label for="startDate">Start Date</label>
            <InputDate id="startDate" class="form-control" @bind-Value="activityModel.StartDate" />
        </div>
        <div class="form-group">
            <label for="endDate">End Date</label>
            <InputDate id="endDate" class="form-control" @bind-Value="activityModel.EndDate" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
</div>

@code {
    private ActivityModel activityModel = new ActivityModel();

    private async Task HandleSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/activities", activityModel);
            if (response.IsSuccessStatusCode)
            {
                // Redirect to another page or show success message
                Navigation.NavigateTo("/");
            }
            else
            {
                // Handle failure
                Console.WriteLine("Failed to save activity");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving activity: {ex.Message}");
        }
    }

    public class ActivityModel
    {
        public string Name { get; set; } = string.Empty;
        public DateTime StartDate { get; set; } = DateTime.Now;
        public DateTime EndDate { get; set; } = DateTime.Now;
    }
}