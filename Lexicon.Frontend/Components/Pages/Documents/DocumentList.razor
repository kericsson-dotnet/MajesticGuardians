@inject IUnitOfWork Services;
@inject IJSRuntime JS

<h3>Dokumenter</h3>
@if (documents == null)
{
	<p>Läser in...</p>
}
else if (documents.Count == 0)
{
	<p>Det finns inga tillgängliga dokumenter</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Filnamn</th>
				<th>Beskrivning</th>
				<th>Uppladdad</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var doc in documents)
			{
				<tr>
					<td>@doc.Name</td>
					<td>@doc.Description</td>
					<td>@doc.TimeAdded.ToString("yyyy-MM-dd HH:mm:ss")</td>
					<td>
						<button class="btn btn-primary" @onclick="() => DownloadFile(doc.DocumentId)">
							Ladda ner
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {
	private List<Document> documents = new();
	private User? currentUser;
	private bool isRender = false;

	public void SetDocuments(List<Document> docs)
	{
		documents = docs;
		StateHasChanged();
	}
	private async Task DownloadFile(int id)
	{
		var document = await Services.DocumentService.GetDocumentAsync(id);
		if (document != null)
		{
			var docUrl = document.Url;
			var docName = document.Name;
			await JS.InvokeVoidAsync("triggerFileDownload", docName, docUrl);
		}
		else
		{
			Console.WriteLine("Filnedladdning misslyckades");
		}
	}
}
