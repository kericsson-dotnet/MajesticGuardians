@page "/file-upload"
@inject IUnitOfWork Services;
@rendermode InteractiveServer

@using System.Net
@using System.Net.Http.Headers

<h2>Dokumentuppladdning</h2>

@if (!string.IsNullOrEmpty(Message))
{
	<p class="alert alert-success" role="alert">@Message</p>
}

<EditForm Model="@LoadFile" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-4">
		<label for="name">Namn</label>
		<InputText id="name" class="form-control" placeholder="Namn" @bind-Value="@LoadFile.Name" />
		<ValidationMessage For="@(() => LoadFile.Name)" />
	</div>
	<div class="mb-4">
		<label for="description">Beskrivning</label>
		<InputText id="description" class="form-control" placeholder="Beskrivning" @bind-Value="@LoadFile.Description" />
		<ValidationMessage For="@(() => LoadFile.Description)" />
	</div>
	<div class="mb-4">
		<label for="attachments">Bilaga</label>
		<InputFile id="attachments" class="form-control" multiple OnChange="@OnInputFileChange" />
		<ValidationMessage For="@(() => LoadFile.Attachments)" />
	</div>
	<button class="btn btn-primary" type="submit">Skicka in</button>
</EditForm>

<DocumentList @ref="documentList"></DocumentList>

@code {
	[SupplyParameterFromForm]
	private File LoadFile { get; set; } = new();
	private long maxFileSize = 1024 * 150;
	private string Message { get; set; } = String.Empty;

	private DocumentList documentList;
	private List<Document> documents;
	private User? currentUser;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			documents = new();
			currentUser = await Services.UserService.GetCurrentUserAsync();
			await GetDocForUser();
			documentList.SetDocuments(documents);
			StateHasChanged();
		}
	}
	private async Task GetDocForUser()
	{
		documents.Clear();
		if (currentUser!.Role == UserRole.Teacher)
		{
			documents = (await Services.DocumentService.GetDocumentsAsync()).ToList();
		}
		else
		{
			var docs = (await Services.DocumentService.GetDocumentsAsync()).ToList();
			foreach (var doc in docs)
			{
				if (doc.UserId == currentUser.UserId)
				{
					documents.Add(doc);
				}
			}
		}
	}
	private async Task OnSubmit()
	{
		try
		{
			using MultipartFormDataContent content = new();
			//Add values if wanted to save in db
			content.Add(new StringContent(LoadFile.Name), "Title");
			content.Add(new StringContent(LoadFile.Description), "Description");
			content.Add(new StringContent(currentUser!.UserId.ToString()), "UserId");
			foreach(var file in LoadFile.Attachments)
			{
				string safeFileName = WebUtility.HtmlEncode(file.Name);
				var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
				fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);
				content.Add(fileContent, nameof(LoadFile.Attachments), safeFileName);
			}
		    await Services.DocumentService.PostFileAsync(content);
			Message = "Uppladdningen lyckades";
			LoadFile = new();
			await GetDocForUser();
			documentList.SetDocuments(documents);
		}	
		catch(Exception e)
		{
			Message = "Uppladdning misslyckades: " + e.Message;
		}
	}
	private void OnInputFileChange(InputFileChangeEventArgs e)
	{
		var newFiles = e.GetMultipleFiles().ToList();
		LoadFile.Attachments = e.GetMultipleFiles();
	}	
}
