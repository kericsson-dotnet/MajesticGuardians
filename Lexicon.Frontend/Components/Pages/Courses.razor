@page "/courses"
@inject IUnitOfWork Services
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using Lexicon.Frontend.ServicesImp



<h3>Course Overview</h3>

<p>Welcome, @currentUser.FirstName @currentUser.LastName!</p>

@if (courses == null)
{
    <p><em>Loading courses...</em></p>
}
else if (!courses.Any())
{
    <p>No courses available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Course Name</th>
                <th>Description</th>
                <th>Start Date</th>
                <th>End Date</th>
                @if (isTeacher)
                {
                    <th>
                        <a @onclick="NavigateToNewModule" class="btn btn-primary">+ Module</a>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.Name</td>
                    <td>@course.Description</td>
                    <td>@course.StartDate.ToShortDateString()</td>
                    <td>@course.EndDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Course> courses;
    private User currentUser;
    private bool isTeacher;

    protected override async Task OnInitializedAsync()
    {
        // currentUser = Services.AuthService.GetCurrentUser(); <--- denna hittas inte pga "Cannot implicitly convert type 'Lexicon.Api.Entities.User' to 'Lexicon.Frontend.Models.User"


        if (currentUser != null)
        {
            //isTeacher = currentUser.Role == Lexicon.Api.Entities.UserRole.Teacher;
            isTeacher = currentUser.Role == UserRole.Teacher;
            // Get all courses from database
            var allCourses = await Services.CourseService.GetCoursesAsync();

            if (isTeacher)
            {
                // Fetch courses for teacher (simulate or retrieve from local data)
                courses = GetCoursesForTeacher(allCourses, currentUser.UserId);
            }
            else
            {
                // Fetch courses for student (simulate or retrieve from local data)
                courses = GetCoursesForStudent(allCourses, currentUser.UserId);
            }
        }
        else
        {
            // Handle users that are not logged in
            Navigation.NavigateTo("/login1");
        }
    }

    private List<Course> GetCoursesForTeacher(List<Course> allCourses, int teacherId)
    {
        return allCourses.Where(c => c.Users.Any(u => u.UserId == teacherId && u.Role == UserRole.Teacher)).ToList();
    }

    private List<Course> GetCoursesForStudent(List<Course> allCourses, int studentId)
    {
        return allCourses.Where(c => c.Users.Any(u => u.UserId == studentId && u.Role == UserRole.Student)).ToList();
    }


    private void NavigateToNewModule()
    {
        Navigation.NavigateTo("/new_or_register_module");
    }
}
